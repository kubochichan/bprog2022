GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-05-19 15:41:39.087855775
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-05-19 15:52:44.63347747
>>> 23 + 5
28
2022-05-19 15:54:40.224642928
>>> 3 + 2 * 5
13
2022-05-19 15:55:28.784767258
>>> (3 + 2) * 5
25
2022-05-19 15:55:46.208087983
>>> 5 - 4 - 8
-7
2022-05-19 15:56:00.497739587
>>> sqrt 2
1.4142135623730951
2022-05-19 16:00:17.335131846
>>> doublo 3

<interactive>:6:1: error: Variable not in scope: doublo :: t0 -> t
2022-05-19 16:02:28.918997725
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-05-26 15:02:13.953426535
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:35.319796283
>>> 2 ^ minBound :: Int

<interactive>:2:3: error:
    • Ambiguous type variable ‘b0’ arising from a use of ‘^’
      prevents the constraint ‘(Integral b0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘b0’ should be.
      These potential instances exist:
        instance Integral Integer -- Defined in ‘GHC.Real’
        instance Integral Int -- Defined in ‘GHC.Real’
        instance Integral Word -- Defined in ‘GHC.Real’
        ...plus one instance involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: 2 ^ minBound :: Int
      In an equation for ‘it’: it = 2 ^ minBound :: Int

<interactive>:2:5: error:
    • Ambiguous type variable ‘b0’ arising from a use of ‘minBound’
      prevents the constraint ‘(Bounded b0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘b0’ should be.
      These potential instances exist:
        instance Bounded Ordering -- Defined in ‘GHC.Enum’
        instance Bounded () -- Defined in ‘GHC.Enum’
        instance (Bounded a, Bounded b) => Bounded (a, b)
          -- Defined in ‘GHC.Enum’
        ...plus 17 others
        ...plus two instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the second argument of ‘(^)’, namely ‘minBound’
      In the expression: 2 ^ minBound :: Int
      In an equation for ‘it’: it = 2 ^ minBound :: Int
2022-05-26 15:05:41.990342072
>>> 2 ^ 63 - 2
9223372036854775806
2022-05-26 15:06:21.991171533
>>> 2 ^ 63 -1
9223372036854775807
2022-05-26 15:06:39.903098029
>>> minbound :: Int

<interactive>:5:1: error:
    • Variable not in scope: minbound :: Int
    • Perhaps you meant ‘minBound’ (imported from Prelude)
2022-05-26 15:06:53.023736907
>>> >>> :l src/First.hs

<interactive>:6:1: error: parse error on input ‘>>>’
2022-05-26 15:53:02.699042885
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:54:16.007924729
>>>  :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:54:16.055963865
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, one module loaded.
2022-05-26 15:56:02.676329586
>>> double 3
6
2022-05-26 15:56:29.668763651
>>> double 123
246
2022-05-26 15:56:39.551547867
>>> double (1 + 3)
8
2022-05-26 15:57:02.255331617
>>> double (1 + 2)
6
2022-05-26 15:57:19.064256791
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-09 14:55:25.688314047
>>> 2 + 3 * 4
14
2022-06-09 15:00:39.902905709
>>> (2 + 3) * 4
20
2022-06-09 15:01:00.21970902
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:01:18.649058275
>>> sqrt (3 ^ 2 + 4 ^ 2)
5.0
2022-06-09 15:05:17.996994906
>>> sqrt (25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:21.354430317
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:43.616046206
>>> sqrt 25
5.0
2022-06-09 15:11:54.148697175
>>> hoge 25 :: Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:14:00.680514532
>>> head [3, 1, 4, 1, 5]
3
2022-06-09 15:47:07.730973957
>>> head[]
*** Exception: Prelude.head: empty list
2022-06-09 15:49:05.615771967
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:50:39.183709467
>>> hoge
[3,1,4,1,5]
2022-06-09 15:51:51.961530393
>>> head hoge
3
2022-06-09 15:52:10.708005564
>>> tail hoge
[1,4,1,5]
2022-06-09 15:52:25.304170242
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:53:17.285653946
>>> hoge !! 0
3
2022-06-09 15:55:06.463142392
>>> >>> hoge 2 !! hoge 

<interactive>:17:1: error: parse error on input ‘>>>’
2022-06-09 15:56:24.227518903
>>> take 3 hoge
[3,1,4]
2022-06-09 15:57:11.856074716
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:23.053469338
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:42.533568173
>>> hoge 5 hoge

<interactive>:21:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:21:1)
2022-06-09 15:58:26.181113696
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:59:00.053561557
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:28.818230625
>>> drop 10 hoge
[]
2022-06-09 16:00:36.858207671
>>> length head

<interactive>:25:1: error:
    • No instance for (Foldable ((->) [a0]))
        arising from a use of ‘length’
    • In the expression: length head
      In an equation for ‘it’: it = length head
2022-06-09 16:01:04.221406023
>>> length hoge
5
2022-06-09 16:01:15.036631108
>>> length []
0
2022-06-09 16:01:30.225523044
>>> sum hoge
14
2022-06-09 16:02:06.33706064
>>> product hoge
60
2022-06-09 16:03:07.768209675
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:05:09.71364562
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:39.09195543
>>> :e src/First loaded.
catn: src/First: openFile: does not exist (No such file or directory)
2022-06-09 16:07:48.528688747
>>> :load src/First loaded.
target ‘loaded.’ is not a module name or a source file
2022-06-09 16:07:48.574730279
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:08:58.549239949
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:08:58.637228993
>>> double 3 + 3
9
2022-06-09 16:09:17.097423697
>>> double (3 + 3)
12
2022-06-09 16:11:19.782645107
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-13 22:09:46.557621948
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-13 22:10:19.861136086
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-13 22:10:19.911669055
>>> quadruple 3
12
2022-06-13 22:11:12.307354896
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-14 21:35:53.209816975
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-14 21:36:32.434212858
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-14 21:36:32.50319064
>>> quadruple 3
12
2022-06-14 21:37:03.721099117
>>> git add .

<interactive>:4:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-14 21:37:24.504147678
>>> git commit -m "update"

<interactive>:5:1: error:
    • Variable not in scope: git :: t1 -> a
    • Perhaps you meant ‘it’ (line 3)

<interactive>:5:5: error: Variable not in scope: commit

<interactive>:5:13: error: Variable not in scope: m :: t0 -> a
2022-06-14 21:38:01.499737008
>>> git push

<interactive>:6:1: error:
    • Variable not in scope: git :: t0 -> t
    • Perhaps you meant ‘it’ (line 3)

<interactive>:6:5: error: Variable not in scope: push
2022-06-14 21:38:19.481547519
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-14 22:31:09.624013075
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-14 22:31:41.744708424
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-14 22:31:41.796377937
>>> quadruple 3
12
2022-06-14 22:32:10.606343772
>>> git add .

<interactive>:4:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-14 22:32:43.897447022
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-16 15:02:38.042643305
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:52.153844656
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:12:06.54770323
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:12:06.597154477
>>> double

<interactive>:4:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:13:24.15549796
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:26.41558393
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:29.450038378
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial n = prodact [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:9:15: error:
    • Variable not in scope: prodact :: [a] -> t
    • Perhaps you meant ‘product’ (imported from Prelude)
  |
9 | factorial n = prodact [1 .. n]
  |               ^^^^^^^
Failed, no modules loaded.
2022-06-16 15:21:18.621958854
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:23:48.542912674
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:23:57.039102743
>>> factorial 3
6
2022-06-16 15:24:13.453290538
>>> factorial 4
24
2022-06-16 15:24:24.899846046
>>> average [1,2,3,4,5]

<interactive>:12:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:39:10.027361741
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: Int -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave  xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:18: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                  ^^

src/First.hs:13:34: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                                  ^^
Failed, no modules loaded.
2022-06-16 15:39:29.008141279
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave  xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:46:20.81710094
>>> average [1,2,3,4,5]
3
2022-06-16 15:46:45.999291801
>>> :t  take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:50:10.032724333
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:20.280659838
>>> my init [1 .. 5]

<interactive>:18:1: error:
    Variable not in scope: my :: ([a0] -> [a0]) -> [a1] -> t
2022-06-16 16:15:07.658653324
>>> myinit [1 .. 5]

<interactive>:19:1: error:
    • Variable not in scope: myinit :: [a0] -> t
    • Perhaps you meant ‘init’ (imported from Prelude)
2022-06-16 16:15:28.754790272
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave  xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:15:47.273728739
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:15:57.338370795
>>> myinit []
*** Exception: src/First.hs:(19,1)-(20,29): Non-exhaustive patterns in function myinit

2022-06-16 16:16:08.130492229
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-23 14:56:23.958072591
>>> :i Num
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num NominalDiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.NominalDiffTime’
instance Num DiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.DiffTime’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
2022-06-23 14:56:37.466779054
>>> 
2022-06-23 14:57:07.205386333
>>> 1 == 2
False
2022-06-23 15:06:23.163362219
>>> 1 < 2
True
2022-06-23 15:06:32.557039425
>>> 1 < 1
False
2022-06-23 15:06:39.09876451
>>> 1 <= 2 
True
2022-06-23 15:06:54.496347529
>>> 1>- 2

<interactive>:7:2: error:
    • Variable not in scope: (>-) :: t0 -> t1 -> t
    • Perhaps you meant one of these:
        ‘-’ (imported from Prelude), ‘>=’ (imported from Prelude),
        ‘>>’ (imported from Prelude)
2022-06-23 15:07:01.631233931
>>> 1 >= 2
False
2022-06-23 15:07:10.93525685
>>> 'a' < 'b'
True
2022-06-23 15:11:48.917894156
>>> 'a' = 'B'
2022-06-23 15:12:00.390762027
>>> ' ' < 'a'
True
2022-06-23 15:12:22.387003354
>>> 'ab' < 'b'

<interactive>:12:1: error:
    • Syntax error on 'ab'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'ab'
2022-06-23 15:13:06.418029995
>>> 1 /= 2
True
2022-06-23 15:16:07.401543522
>>> 1 /= 1
False
2022-06-23 15:16:13.866279356
>>> :i abs
type Num :: * -> Constraint
class Num a where
  ...
  abs :: a -> a
  ...
  	-- Defined in ‘GHC.Num’
2022-06-23 15:30:24.619990483
>>> abs

<interactive>:16:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-23 15:31:24.26067285
>>> abs (-234)
234
2022-06-23 15:34:46.467033274
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-30 14:57:09.99981929
>>> >>> [ x ^ 2 | x <- [1 .. 5] ]

<interactive>:1:1: error: parse error on input ‘>>>’
2022-06-30 15:02:17.663742538
>>> [x^2|x<-[1..5]]
[1,4,9,16,25]
2022-06-30 15:03:49.114254792
>>> map(^2)[1..5]
[1,4,9,16,25]
2022-06-30 15:06:15.902446964
>>> >>> [x*2|x<-[1..5]]

<interactive>:4:1: error: parse error on input ‘>>>’
2022-06-30 15:12:35.523920375
>>> [x*2|x<-[1..5]]
[2,4,6,8,10]
2022-06-30 15:13:14.152601378
>>> [x'div'2|x<-[1..5]]

<interactive>:6:2: error: Variable not in scope: x'div'2
2022-06-30 15:13:55.744065118
>>> [x'div'2|x<-[1..5]]

<interactive>:7:2: error: Variable not in scope: x'div'2
2022-06-30 15:14:41.446575268
>>> [x`div`2|x<-[1..5]]
[0,1,1,2,2]
2022-06-30 15:15:13.668121611
>>> [x`diModv`2|x<-[1..5]]

<interactive>:9:3: error:
    • Variable not in scope: diModv :: t0 -> t1 -> a
    • Perhaps you meant ‘divMod’ (imported from Prelude)
2022-06-30 15:15:54.49062187
>>> [x`divMod`2\x<-[1..5]]

<interactive>:10:14: error:
    parse error on input ‘<-’
    Perhaps this statement should be within a 'do' block?
2022-06-30 15:16:27.192890042
>>> [x`diModv`2|x<-[1..5]]

<interactive>:11:3: error:
    • Variable not in scope: diModv :: t0 -> t1 -> a
    • Perhaps you meant ‘divMod’ (imported from Prelude)
2022-06-30 15:16:48.541572063
>>> [x`diMod`2|x<-[1..5]]

<interactive>:12:3: error:
    • Variable not in scope: diMod :: t0 -> t1 -> a
    • Perhaps you meant ‘divMod’ (imported from Prelude)
2022-06-30 15:17:20.92031894
>>> [x`divMod`2|x<-[1..5]]
[(0,1),(1,0),(1,1),(2,0),(2,1)]
2022-06-30 15:17:35.604834575
>>> [(x,y)|x<-"abc",y<-[4,5]]
[('a',4),('a',5),('b',4),('b',5),('c',4),('c',5)]
2022-06-30 15:21:17.107319282
>>> [(x,y)|y<-[4,5],x<-"abc"]
[('a',4),('b',4),('c',4),('a',5),('b',5),('c',5)]
2022-06-30 15:22:01.836697916
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave  xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [x | xs <- xss, x <- xs]
Ok, no modules loaded.
2022-06-30 15:30:00.031126132
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:30:00.096280151
>>> [1|_<-[1..5]]
[1,1,1,1,1]
2022-06-30 15:47:38.657279617
>>> mylength['a'..'z']

<interactive>:19:1: error:
    • Variable not in scope: mylength :: [Char] -> t
    • Perhaps you meant ‘length’ (imported from Prelude)
2022-06-30 15:51:30.995652959
>>> mylenght ['a' .. 'z']

<interactive>:20:1: error:
    Variable not in scope: mylenght :: [Char] -> t
2022-06-30 15:52:21.251655599
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x) 
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave  xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:53:14.389788043
>>> mylength['a'..'z']
26
2022-06-30 15:53:59.700308763
>>> ['a'..'z']
"abcdefghijklmnopqrstuvwxyz"
2022-06-30 15:54:22.086951859
>>> ['あ'..'ん']
"\12354\12355\12356\12357\12358\12359\12360\12361\12362\12363\12364\12365\12366\12367\12368\12369\12370\12371\12372\12373\12374\12375\12376\12377\12378\12379\12380\12381\12382\12383\12384\12385\12386\12387\12388\12389\12390\12391\12392\12393\12394\12395\12396\12397\12398\12399\12400\12401\12402\12403\12404\12405\12406\12407\12408\12409\12410\12411\12412\12413\12414\12415\12416\12417\12418\12419\12420\12421\12422\12423\12424\12425\12426\12427\12428\12429\12430\12431\12432\12433\12434\12435"
2022-06-30 15:54:45.866770588
>>> putStrLn it
あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
2022-06-30 15:55:06.822451087
>>> :q
Leaving GHCi.
